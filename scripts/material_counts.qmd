---
title: "Material Data Wrangling"
author: "Hannah Irish"
format: html
editor: visual
---

Load packages

```{r}

## load tidyverse package 
library(tidyverse)


```

Read in policy database

```{r}

##
policy_database <- read_csv(here::here("data/Working_Policy_Database.csv")) %>%
  janitor::clean_names()
  # Convert the "materials" column to lowercase so they'll be captured appropriately
  policy_database$covered_material_s <- tolower(policy_database$covered_material_s)

```

Count the mentions of each material

```{r}

##make a list of the materials to capture 
material_list <- c("steel", "aluminum", "insulation", "glass", "concrete", "cement", "asphalt", "wood", "timber")


##initialize material column to 0 in policy_database
for (material in material_list) {
  policy_database[[material]] <- 0
}


##use str_count to count everytime a policy mentions one of these materials
for (material in material_list){
  policy_database[[material]] <- str_count(policy_database$covered_material_s, material)
}

## label as 1 if the material is included and as 0 if it's not
for(material in material_list){
  policy_database[[material]] <- ifelse(policy_database[[material]] >0 ,1,0)
}

# new database to investigate that functions worked correctly
policy_database_materials <- policy_database %>%
  select(2, 20, 46:ncol(policy_database)) 

# sum the material counts to get total policies which mention them
sums_df <- policy_database_materials %>%
  summarise_at(c(3:ncol(policy_database_materials)), sum, na.rm = TRUE) %>% pivot_longer(., cols=everything(), values_to="n_policies") 

##Combine wood and timber
data_combined <- sums_df %>%
  mutate(name = ifelse(name %in% c("wood", "timber"), "wood/timber", name)) %>%
  group_by(name) %>%
  summarise(n_policies = sum(n_policies))

```

Graph this

```{r}

# data_combined <- data_combined[order(-data_combined$n_policies), ]

#custom_names <-  c("Concrete", "Wood/Timber", "Glass", "Insulation", "Cement", "Aspahlt", "Aluminum" )
  
# Create the dumbbell plot
ggplot(data_combined, aes(x = n_policies, y = reorder(name, n_policies))) +
  geom_point(color = "darkblue", size=3) +  # Points before and after
  geom_segment(aes(x = 0, xend = n_policies, yend = reorder(name, n_policies)), color = "darkblue") +  # Line segments connecting points
  labs(title = "Materials Addressed by Policies", x = "Number of Policies Mentioning Material", y = "Material") +  # Add labels and titles
  geom_text(aes(label = n_policies), vjust = -0.75, color = "darkblue", size = 4) +  # Add count labels
  #scale_y_discrete(breaks = custom_names) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))

```
