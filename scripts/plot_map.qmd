---
title: "Spatial Map Data"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Spatial Map Creation

Load packages

```{r}

library(tidyverse)
library(sf)
library(ggplot2)
library(maps)
library(showtext)

##redacted offline
##add google fonts
font_add_google(name = "Poppins", family = "poppins")
font_add_google(name= "Inter", family="inter")

##redacted offline
##utilize google fonts
showtext_auto()
```

Read in data

```{r}

data_base <- read_csv(here::here("data/Working_Policy_Database_w_countries.csv")) %>% 
  janitor::clean_names() 
  
  
lat_lon_df <- data_base %>% 
  select(title_of_policy, 
         lat, lon, 
         policy_type, 
         legal_status, 
         lever, 
         specific_lever, 
         location,
         country,
         jurisdiction) 

lat_lon_df <- lat_lon_df[!is.na(lat_lon_df$lon), ]
lat_lon_df <- lat_lon_df[!is.na(lat_lon_df$lat), ]



data_sf <- st_as_sf(lat_lon_df, coords = c("lon", "lat"), crs = 4326)



```

Policy Types Wrangling

```{r}

unique_types <- unique(data_sf$policy_type)

unique_types

data_type_remove_na <- data_sf[!is.na(data_sf$policy_type), ]

data_type_update <- data_type_remove_na %>% 
  mutate(type_spec = case_when(
    policy_type == "Plan" ~ "Plan/Recommendation",
    policy_type == "Recommendation" ~ "Plan/Recommendation",
    policy_type == "Law" ~ "Law, Standard, etc.",
    policy_type == "By-Law" ~ "Law, Standard, etc.",
    policy_type == "Resolution" ~ "Law, Standard, etc.",
    policy_type == "Standard" ~ "Law, Standard, etc.",
    policy_type == "Decree" ~ "Law, Standard, etc.",
    policy_type == "Executive Order" ~ "Executive Order",
    policy_type == "Voluntary Program" ~ "Voluntary Program",
  ))


```

## Map

```{r}


policy_type_pallette <- c("Voluntary Program" = "#Fde725ff",
                          "Executive Order" = "#29af7FFF",
                          "Plan/Recommendation" = "#33638DFF", "Law, Standard, etc." = "#482677ff")



world_map <- map_data("world")

world_map <- subset(world_map, region != "Antarctica")

geom_world <- ggplot()+
  geom_polygon(data = world_map, aes(x = long, y = lat, group = group), size =0.1,
               fill = "grey90", color = "gray40") +
  coord_sf(crs = 4326)  # Set CRS to WGS 84 (EPSG:4326)

 png("world_map.png", width =3300, height = 1600, res = 600)
 
geom_with_points <- geom_world + 
  geom_sf(data = data_type_update, aes(color = type_spec), fill = "black", size = 3, shape = 18,  alpha=0.9) +
  scale_color_manual(values =policy_type_pallette)+
  labs(title = "Embodied Carbon Policies by Policy Type")+
  theme_void()+
  theme(legend.position = "bottom",# Move legend to the bottom
        legend.title = element_blank(),
        legend.text = element_text(family="inter", 
                                   size=20,
                                   hjust =0.35),
         plot.title = element_text(face="bold",
                              family = "inter",
                              size = 30,
                              hjust = 0.5,
                              vjust = 2),
        aspect.ratio = 0.45,
        panel.background = element_rect(fill = "lightblue")
        )  




geom_with_points

# Save or print the plot
print(geom_with_points)

dev.off()

```

## Make pie chart

```{r}



# Count occurrences of each policy type
policy_type_counts <- table(data_type_update$type_spec)

# Convert to dataframe
policy_type_counts_df <- as.data.frame(policy_type_counts)

names(policy_type_counts_df) <- c("Policy_Type", "Occurrences")

total_occurrences <- sum(policy_type_counts_df$Occurrences)

policy_type_counts_df$Percentage <- (policy_type_counts_df$Occurrences / total_occurrences) * 100

# Create the pie chart
pie_chart <- ggplot(policy_type_counts_df, aes(x = "", y = Percentage, fill = Policy_Type)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = policy_type_pallette) +
  labs(title = "Breakdown of All Policies by Policy Type",
       fill = "Policy Type",
       x = NULL,
       y = NULL) +
  theme(legend.position = "right") +  # Position the legend at the right
  geom_text(aes(label = paste0(round(Percentage, 1), "%")), 
            position = position_stack(vjust = 0.5),
            color = "black",
            family = "poppins",
            size = 5) + # Add labels with percentages
  theme_void() +
  theme(plot.title = element_text(face = "bold",
                                  family = "inter",
                                  size = 25,
                                  hjust = 0.5,
                                  vjust = -3),
        legend.title = element_text(face = "bold",
                                  family = "inter",
                                  size = 20),
        legend.text = element_text(family = "inter",
                                   size = 16)
  )


pie_chart
```

## Stacked bar graph by country and type of policy

```{r}

jurisdiction_factor <- c("City", "County", "U.S. State", "National")

type_jurisdiction <- data_type_update %>% 
  filter(jurisdiction != "Association/Group") %>% 
  mutate(jurisdiction=factor(jurisdiction, levels=jurisdiction_factor))

stacked_country_type <- ggplot() +
  geom_bar(data=type_jurisdiction, aes(x=type_spec, fill=jurisdiction))+
  labs(x="Policy Type", y="Number of Policies", fill="Jurisdiction Level", title="Policy Count by Type and Jurisdiction Level")+
  scale_y_continuous(breaks=seq(0, 30, by=5))+
  scale_fill_manual(values=c("#b3cde0", "#6497b1", "#005b96", "#03396c"))+
  theme_minimal()+
  theme(axis.title = element_text(face="bold",
                                  family="inter", 
                                   size=18),
        plot.title=element_text(face="bold",
                                family="inter", 
                                   size=20),
        legend.title=element_text(face="bold",
                                  family="inter",
                                  size=15),
        axis.text = element_text(family="poppins",
                                 size=15),
        legend.text = element_text(family="poppins",
                                 size=15))+
  
  coord_flip()
  

stacked_country_type

```

## Summing by Legal Status

\# Summarize the legal status column

legal_status_summary \<- summary(data_type_update\$legal_status)

\# Display the summary

print(legal_status_summary)

```{r}

# Summarize the legal status column

data_sf_plot_stat <- data_sf %>% 
  filter(legal_status %in% c("Statutory", "Non-Statutory"))

nonstat <- nrow(data_sf_plot_stat %>% 
  filter(legal_status == "Non-Statutory"))

stat <- nrow(data_sf_plot_stat %>% 
  filter(legal_status == "Statutory"))



```

## Year Histogram

```{r}


data_year <- data_base[!is.na(data_base$date_enacted), ]

class(data_year$date_enacted)

ggplot(data = data_year, aes(x = date_enacted)) +
  geom_histogram(stat = "count", fill = "royalblue2", color = "black") +
  labs(x = "Year", y = "# Policies Enacted", title = "Number of Policies Enacted by Year") +
  scale_x_continuous(breaks = seq(2010, 2023, by = 1)) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold",
                                  family = "inter", 
                                  hjust = 0.5,
                                  size=20),
        axis.title = element_text(face = "bold",
                                  family = "poppins",
                                  size=15),
        axis.text = element_text(family = "poppins",
                                 size=15),
        aspect.ratio = 0.5)

```

```{r}



```
