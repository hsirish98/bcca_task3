---
title: "Spatial Map Data"
format: html
author: Hannah Irish
editor: visual
editor_options: 
  chunk_output_type: console
---

## This script is updated as of June 2024

## Policy Map by Category

Load packages

```{r}

library(tidyverse)
library(sf)
library(ggplot2)
library(maps)
library(showtext)

#redacted offline
#add google fonts
font_add_google(name = "Poppins", family = "poppins")
font_add_google(name= "Inter", family="inter")

##redacted offline
##utilize google fonts
showtext_auto()
```

Read in data -- names of fields may need to be updated if versions of the database have changed since update date at the top of this script

```{r}

##read in database
data_base <- read_csv(here::here("data/Working_Policy_Database_1.csv")) %>% 
  janitor::clean_names() 
  
 ##select main descriptive policies 
##please note field names and update if necessary
lat_lon_df <- data_base %>% 
  select(
         lat, ##latitude,
         lon, ##longitude
         legal_status, ##denoting statutory vs. non
         policy_category, ##main category of policy (clean procurement, building codes/planning)
         methodology, ##method of achieving carbon reduction
         participation, ##mandatory vs. voluntary
         location, ##specific location 
         country, ##country where policy is implemented
         jurisdiction) ##places the policy covers 

##remove nas
lat_lon_df <- lat_lon_df[!is.na(lat_lon_df$lon), ]
lat_lon_df <- lat_lon_df[!is.na(lat_lon_df$lat), ]


##convert to simple features object
data_sf <- st_as_sf(lat_lon_df, coords = c("lon", "lat"), crs = 4326)


clean_map <- data_sf %>%
  separate_rows(policy_category, sep = ",") %>% 
  mutate(policy_category = trimws(policy_category))

```

Policy Category Wrangling + Color Palette

```{r}
# 
# ##make object "unique_types" which contains the distince policy categories
# unique_types <- unique(data_sf$primary_policy_category_broad)
# 
# ##look at the types so you can make the palette
# unique_types
# 
# ##make sure to remove any extra rows that might have an na in the category section
# data_category_remove_na <- data_sf[!is.na(data_sf$primary_policy_category_broad), ]



policy_category_pallette <- c("Climate Commitment" = "#29af7FFF",
                          "Clean Procurement" = "#33638DFF", "Building Codes/Planning" = "#482677ff", "Training & Education" = "#fde725")




```

## Make Map

```{r}

##load base map
world_map <- map_data("world")

##remove Antarctica so the view isn't skewed
world_map <- subset(world_map, region != "Antarctica")

## plot base map to then add specifics on top of
geom_world <- ggplot()+
  geom_polygon(data = world_map, aes(x = long, y = lat, group = group), size =0.1,
               fill = "grey90", color = "gray40") +
  coord_sf(crs = 4326)  # Set CRS to WGS 84 (EPSG:4326)

##add the data to map to create map object with policies 
geom_with_points <- geom_world + 
  geom_sf(data = clean_map, 
          aes(color = policy_category), ##plot color by category type
          fill = "black", size = 3, shape = 18,  alpha=0.75) + ##make shapes of points 
  scale_color_manual(values = policy_category_pallette) + ##set the category to have the palette colors
  labs(title = "Map of Embodied Carbon Policies by  Category")+
  theme_void()+ ##remove any unnecessary background
  theme(legend.position = "bottom",# Move legend to the bottom
        legend.title = element_blank(), 
        legend.text = element_text(family="inter", ##set text size and font
                                   size=25,
                                   hjust =0.35),
         plot.title = element_text(face="bold", ##set text size and font
                              family = "inter",
                              size = 40,
                              hjust = 0.5,
                              vjust = 2),
        legend.key = element_blank(),
        aspect.ratio = 0.5,
        panel.background = element_rect(fill = "lightblue") ##set the background to light blue to look like ocean
        )  




geom_with_points
ggsave(here::here("images/new_map.png"), plot = geom_with_points, width = 7, height = 4, dpi = 320)


# Save or print the plot
print(geom_with_points)

dev.off()

```

```         
```

```{r}

jurisdiction_factor <- c("City", "County", "U.S. State", "National")

type_jurisdiction <- lat_lon_df %>% 
  filter(jurisdiction != "Association/Group") %>% 
  mutate(jurisdiction=factor(jurisdiction, levels=jurisdiction_factor))

city_breakdown <- data_type_update %>% 
  filter(jurisdiction=="City") %>% 
  group_by(type_spec) %>% 
   summarise(count = n())

city_n <- sum(city_breakdown$count)

##the numerator here is the number of plans in the city category
city_pct =9/city_n
  
stacked_type_jur <- ggplot() +
  geom_bar(data=type_jurisdiction, aes(x=type_spec, fill=jurisdiction))+
  labs(x="Policy Type", y="Number of Policies", fill="Jurisdiction Level", title="Policy Count by Type and Jurisdiction Level")+
  scale_y_continuous(breaks=seq(0, 30, by=5))+
  scale_fill_manual(values=c("#b3cde0", "#6497b1", "#005b96", "#03396c"))+
  theme_minimal()+
  theme(axis.title = element_text(face="bold",
                                  family="inter", 
                                   size=35),
        plot.title=element_text(face="bold",
                                family="inter", 
                                   size=40),
        legend.title=element_text(face="bold",
                                  family="inter",
                                  size=30),
        axis.text = element_text(family="poppins",
                                 size=30),
        legend.text = element_text(family="poppins",
                                 size=30),
        legend.position="bottom")+
  
  coord_flip()
  

stacked_type_jur

ggsave(here::here("images/jurisdiction.png"), plot = stacked_type_jur, width = 7, height = 4, dpi = 320)

```

## Stacked bar graph by country and type of policy

```{r}

stacked_country_type <- ggplot() +
  geom_bar(data=type_jurisdiction, aes(x=country, fill=type_spec))+
  labs(x="Country", y="Number of Policies", fill="Policy Type", title="Policy Count by Country and Policy Type")+
  scale_y_continuous(breaks=seq(0, 30, by=5))+
  scale_fill_manual(values = policy_type_pallette)+
  theme_minimal()+
  theme(axis.title = element_text(face="bold",
                                  family="inter", 
                                   size=18),
        plot.title=element_text(face="bold",
                                family="inter", 
                                   size=20),
        legend.title=element_text(face="bold",
                                  family="inter",
                                  size=15),
        axis.text = element_text(family="poppins",
                                 size=15),
        legend.text = element_text(family="poppins",
                                 size=15))+
  
  coord_flip()
  

stacked_country_type
```
